#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Alumno {
	int dni;
	char nombre[30];
	char apellido[30];
	int presentes;
	int ausentes;
	struct Alumno *sig;
} Alumno;

typedef struct AsistenciaDia {
	int dni;
	char fecha[11]; // formato YYYY-MM-DD
	char estado;    // 'P' o 'A'
	struct AsistenciaDia *sig;
} AsistenciaDia;

Alumno* lista = NULL;
AsistenciaDia* asistencias = NULL;

// Crear nuevo alumno
Alumno* crearAlumno(int dni, char nombre[], char apellido[]) {
	Alumno* nuevo = (Alumno*)malloc(sizeof(Alumno));
	nuevo->dni = dni;
	strcpy(nuevo->nombre, nombre);
	strcpy(nuevo->apellido, apellido);
	nuevo->presentes = 0;
	nuevo->ausentes = 0;
	nuevo->sig = NULL;
	return nuevo;
}

// Agregar alumno a la lista
void agregarAlumno() {
	int dni;
	char nombre[30], apellido[30];
	printf("DNI: "); scanf("%d", &dni);
	printf("Nombre: "); scanf("%s", nombre);
	printf("Apellido: "); scanf("%s", apellido);
	Alumno* nuevo = crearAlumno(dni, nombre, apellido);
	nuevo->sig = lista;
	lista = nuevo;
	printf("Alumno agregado.\n");
}

// Buscar alumno por DNI
Alumno* buscarAlumno(int dni) {
	Alumno* aux = lista;
	while (aux != NULL) {
		if (aux->dni == dni) return aux;
		aux = aux->sig;
	}
	return NULL;
}

// Registrar asistencia por fecha
void registrarAsistenciaPorFecha() {
	int dni;
	char fecha[11], estado;
	printf("DNI del alumno: "); scanf("%d", &dni);
	Alumno* alumno = buscarAlumno(dni);
	if (!alumno) {
		printf("Alumno no encontrado.\n");
		return;
	}
	printf("Fecha (YYYY-MM-DD): "); scanf("%s", fecha);
	printf("Estado (P = Presente, A = Ausente): "); scanf(" %c", &estado);
	
	if (estado == 'P' || estado == 'p') alumno->presentes++;
	else if (estado == 'A' || estado == 'a') alumno->ausentes++;
	else {
		printf("Estado invalido.\n");
		return;
	}
	
	AsistenciaDia* nueva = (AsistenciaDia*)malloc(sizeof(AsistenciaDia));
	nueva->dni = dni;
	strcpy(nueva->fecha, fecha);
	nueva->estado = estado;
	nueva->sig = asistencias;
	asistencias = nueva;
	
	printf("Asistencia registrada.\n");
}
// Editar asistencia existente
void editarAsistenciaPorFecha() {
	int dni;
	char fecha[11];
	printf("DNI del alumno: "); scanf("%d", &dni);
	printf("Fecha a editar (YYYY-MM-DD): "); scanf("%s", fecha);
	
	AsistenciaDia* aux = asistencias;
	while (aux) {
		if (aux->dni == dni && strcmp(aux->fecha, fecha) == 0) {
			printf("Asistencia actual: %c\n", aux->estado);
			printf("Nuevo estado (P/A): ");
			scanf(" %c", &aux->estado);
			printf("Asistencia actualizada.\n");
			return;
		}
		aux = aux->sig;
	}
	printf("No se encontró asistencia para ese día.\n");
}

// Ver historial de un alumno
void verHistorial() {
	int dni;
	printf("DNI del alumno: "); scanf("%d", &dni);
	Alumno* alumno = buscarAlumno(dni);
	if (alumno) {
		printf("Alumno: %s %s\nPresentes: %d\nAusentes: %d\n",
			   alumno->nombre, alumno->apellido, alumno->presentes, alumno->ausentes);
		printf("Detalle por fecha:\n");
		AsistenciaDia* aux = asistencias;
		while (aux) {
			if (aux->dni == dni) {
				printf("%s - %c\n", aux->fecha, aux->estado);
			}
			aux = aux->sig;
		}
	} else printf("Alumno no encontrado.\n");
}

// Mostrar alumnos con más inasistencias
void mostrarInasistencias() {
	Alumno* aux = lista;
	printf("Alumnos con más inasistencias:\n");
	while (aux) {
		if (aux->ausentes > aux->presentes)
			printf("%s %s - Inasistencias: %d\n", aux->nombre, aux->apellido, aux->ausentes);
		aux = aux->sig;
	}
}

// Guardar datos en archivos
void guardarArchivo() {
	FILE *f = fopen("asistencias.txt", "w");
	Alumno* aux = lista;
	while (aux) {
		fprintf(f, "%d %s %s %d %d\n", aux->dni, aux->nombre, aux->apellido, aux->presentes, aux->ausentes);
		aux = aux->sig;
	}
	fclose(f);
	
	FILE *fa = fopen("detalle_asistencias.txt", "w");
	AsistenciaDia* ad = asistencias;
	while (ad) {
		fprintf(fa, "%d %s %c\n", ad->dni, ad->fecha, ad->estado);
		ad = ad->sig;
	}
	fclose(fa);
	printf("Datos guardados en archivo.\n");
}

// Cargar datos desde archivos
void cargarArchivo() {
	FILE *f = fopen("asistencias.txt", "r");
	if (f) {
		int dni, pres, aus;
		char nombre[30], apellido[30];
		while (fscanf(f, "%d %s %s %d %d", &dni, nombre, apellido, &pres, &aus) != EOF) {
			Alumno* nuevo = crearAlumno(dni, nombre, apellido);
			nuevo->presentes = pres;
			nuevo->ausentes = aus;
			nuevo->sig = lista;
			lista = nuevo;
		}
		fclose(f);
	}
	
	FILE *fa = fopen("detalle_asistencias.txt", "r");
	if (fa) {
		int dni;
		char fecha[11], estado;
		while (fscanf(fa, "%d %s %c", &dni, fecha, &estado) != EOF) {
			AsistenciaDia* nuevo = (AsistenciaDia*)malloc(sizeof(AsistenciaDia));
			nuevo->dni = dni;
			strcpy(nuevo->fecha, fecha);
			nuevo->estado = estado;
			nuevo->sig = asistencias;
			asistencias = nuevo;
		}
		fclose(fa);
	}
}

// Menú principal
void menu() {
	int op;
	do {
		printf("\n1. Agregar Alumno\n2. Registrar Asistencia\n3. Editar Asistencia\n4. Ver Historial\n5. Mostrar Inasistencias\n6. Guardar Archivo\n7. Salir\nOpcion: ");
		scanf("%d", &op);
		switch (op) {
		case 1: agregarAlumno(); break;
		case 2: registrarAsistenciaPorFecha(); break;
		case 3: editarAsistenciaPorFecha(); break;
		case 4: verHistorial(); break;
		case 5: mostrarInasistencias(); break;
		case 6: guardarArchivo(); break;
		case 7: printf("Saliendo...\n"); break;
		default: printf("Opcion invalida.\n");
		}
	} while (op != 7);
}

int main() {
	cargarArchivo();
	menu();
	guardarArchivo();
	return 0;
}
